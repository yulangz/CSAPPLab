#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx		# len < 8?
	jl Remain		# goto Remain

Loop1:
	mrmovq (%rdi), %r8	# read val1 from src...
	mrmovq 8(%rdi), %r9 # read val2
	rmmovq %r8, (%rsi)	# store val1
	andq %r8, %r8		# val <= 0?
	jle Loop2		
	iaddq $1, %rax # count++
Loop2:
	rmmovq %r9, 8(%rsi)	# store val2
	andq %r9, %r9		# val <= 0?
	jle Loop3		
	iaddq $1, %rax # count++

Loop3:
	mrmovq 16(%rdi), %r8	# read val3 from src...
	mrmovq 24(%rdi), %r9 # read val4
	rmmovq %r8, 16(%rsi)	# store val3
	andq %r8, %r8		# val <= 0?
	jle Loop4		
	iaddq $1, %rax # count++
Loop4:
	rmmovq %r9, 24(%rsi)	# store val4
	andq %r9, %r9		# val <= 0?
	jle Loop5		
	iaddq $1, %rax # count++

Loop5:
	mrmovq 32(%rdi), %r8	# read val5 from src...
	mrmovq 40(%rdi), %r9 # read val6
	rmmovq %r8, 32(%rsi)	# store val5
	andq %r8, %r8		# val <= 0?
	jle Loop6		
	iaddq $1, %rax # count++
Loop6:
	rmmovq %r9, 40(%rsi)	# store val6
	andq %r9, %r9		# val <= 0?
	jle Loop7		
	iaddq $1, %rax # count++

Loop7:
	mrmovq 48(%rdi), %r8	# read val7 from src...
	mrmovq 56(%rdi), %r9 # read val8
	rmmovq %r8, 48(%rsi)	# store val7
	andq %r8, %r8		# val <= 0?
	jle Loop8		
	iaddq $1, %rax # count++
Loop8:
	rmmovq %r9, 56(%rsi)	# store val8
	andq %r9, %r9		# val <= 0?
	jle Test		
	iaddq $1, %rax # count++
Test:
	iaddq $64, %rdi # src += 8
	iaddq $64, %rsi # dest += 8
	iaddq $-8, %rdx # len -= 8
	jge Loop1

Remain:
	iaddq $8, %rdx
	jg R1
	ret
R1:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R1_
	iaddq $1, %rax
R1_:
	iaddq $-1, %rdx
	jg R2
	ret

R2:
	mrmovq (%rdi), %r8 #fetch val2
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val2
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R2_
	iaddq $1, %rax
R2_:
	iaddq $-1, %rdx
	jg R3
	ret

R3:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R3_
	iaddq $1, %rax
R3_:
	iaddq $-1, %rdx
	jg R4
	ret

R4:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R4_
	iaddq $1, %rax
R4_:
	iaddq $-1, %rdx
	jg R5
	ret

R5:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R5_
	iaddq $1, %rax
R5_:
	iaddq $-1, %rdx
	jg R6
	ret

R6:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R6_
	iaddq $1, %rax
R6_:
	iaddq $-1, %rdx
	jg R7
	ret

R7:
	mrmovq (%rdi), %r8 #fetch val1
	iaddq $8, %rdi # src++
	rmmovq %r8, (%rsi) # store val1
	iaddq $8, %rsi # dest++
	andq %r8, %r8
	jle R7_
	iaddq $1, %rax
R7_:
	iaddq $-1, %rdx

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
