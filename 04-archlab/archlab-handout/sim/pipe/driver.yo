                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f68805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76805000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 800104000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len < 8?
0x047: 72bf01000000000000   | 	jl Remain		# goto Remain
                            | 
0x050:                      | Loop1:
0x050: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val1 from src...
0x05a: 50970800000000000000 | 	mrmovq 8(%rdi), %r9 # read val2
0x064: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# store val1
0x06e: 6288                 | 	andq %r8, %r8		# val <= 0?
0x070: 718300000000000000   | 	jle Loop2		
0x079: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x083:                      | Loop2:
0x083: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# store val2
0x08d: 6299                 | 	andq %r9, %r9		# val <= 0?
0x08f: 71a200000000000000   | 	jle Loop3		
0x098: c0f00100000000000000 | 	iaddq $1, %rax # count++
                            | 
0x0a2:                      | Loop3:
0x0a2: 50871000000000000000 | 	mrmovq 16(%rdi), %r8	# read val3 from src...
0x0ac: 50971800000000000000 | 	mrmovq 24(%rdi), %r9 # read val4
0x0b6: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)	# store val3
0x0c0: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0c2: 71d500000000000000   | 	jle Loop4		
0x0cb: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x0d5:                      | Loop4:
0x0d5: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)	# store val4
0x0df: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0e1: 71f400000000000000   | 	jle Loop5		
0x0ea: c0f00100000000000000 | 	iaddq $1, %rax # count++
                            | 
0x0f4:                      | Loop5:
0x0f4: 50872000000000000000 | 	mrmovq 32(%rdi), %r8	# read val5 from src...
0x0fe: 50972800000000000000 | 	mrmovq 40(%rdi), %r9 # read val6
0x108: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)	# store val5
0x112: 6288                 | 	andq %r8, %r8		# val <= 0?
0x114: 712701000000000000   | 	jle Loop6		
0x11d: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x127:                      | Loop6:
0x127: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)	# store val6
0x131: 6299                 | 	andq %r9, %r9		# val <= 0?
0x133: 714601000000000000   | 	jle Loop7		
0x13c: c0f00100000000000000 | 	iaddq $1, %rax # count++
                            | 
0x146:                      | Loop7:
0x146: 50873000000000000000 | 	mrmovq 48(%rdi), %r8	# read val7 from src...
0x150: 50973800000000000000 | 	mrmovq 56(%rdi), %r9 # read val8
0x15a: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)	# store val7
0x164: 6288                 | 	andq %r8, %r8		# val <= 0?
0x166: 717901000000000000   | 	jle Loop8		
0x16f: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x179:                      | Loop8:
0x179: 40963800000000000000 | 	rmmovq %r9, 56(%rsi)	# store val8
0x183: 6299                 | 	andq %r9, %r9		# val <= 0?
0x185: 719801000000000000   | 	jle Test		
0x18e: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x198:                      | Test:
0x198: c0f74000000000000000 | 	iaddq $64, %rdi # src += 8
0x1a2: c0f64000000000000000 | 	iaddq $64, %rsi # dest += 8
0x1ac: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx # len -= 8
0x1b6: 755000000000000000   | 	jge Loop1
                            | 
0x1bf:                      | Remain:
0x1bf: c0f20800000000000000 | 	iaddq $8, %rdx
0x1c9: 76d301000000000000   | 	jg R1
0x1d2: 90                   | 	ret
0x1d3:                      | R1:
0x1d3: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x1dd: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x1e7: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x1f1: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x1fb: 6288                 | 	andq %r8, %r8
0x1fd: 711002000000000000   | 	jle R1_
0x206: c0f00100000000000000 | 	iaddq $1, %rax
0x210:                      | R1_:
0x210: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x21a: 762402000000000000   | 	jg R2
0x223: 90                   | 	ret
                            | 
0x224:                      | R2:
0x224: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val2
0x22e: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x238: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val2
0x242: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x24c: 6288                 | 	andq %r8, %r8
0x24e: 716102000000000000   | 	jle R2_
0x257: c0f00100000000000000 | 	iaddq $1, %rax
0x261:                      | R2_:
0x261: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x26b: 767502000000000000   | 	jg R3
0x274: 90                   | 	ret
                            | 
0x275:                      | R3:
0x275: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x27f: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x289: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x293: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x29d: 6288                 | 	andq %r8, %r8
0x29f: 71b202000000000000   | 	jle R3_
0x2a8: c0f00100000000000000 | 	iaddq $1, %rax
0x2b2:                      | R3_:
0x2b2: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x2bc: 76c602000000000000   | 	jg R4
0x2c5: 90                   | 	ret
                            | 
0x2c6:                      | R4:
0x2c6: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x2d0: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x2da: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x2e4: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x2ee: 6288                 | 	andq %r8, %r8
0x2f0: 710303000000000000   | 	jle R4_
0x2f9: c0f00100000000000000 | 	iaddq $1, %rax
0x303:                      | R4_:
0x303: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x30d: 761703000000000000   | 	jg R5
0x316: 90                   | 	ret
                            | 
0x317:                      | R5:
0x317: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x321: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x32b: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x335: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x33f: 6288                 | 	andq %r8, %r8
0x341: 715403000000000000   | 	jle R5_
0x34a: c0f00100000000000000 | 	iaddq $1, %rax
0x354:                      | R5_:
0x354: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x35e: 766803000000000000   | 	jg R6
0x367: 90                   | 	ret
                            | 
0x368:                      | R6:
0x368: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x372: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x37c: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x386: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x390: 6288                 | 	andq %r8, %r8
0x392: 71a503000000000000   | 	jle R6_
0x39b: c0f00100000000000000 | 	iaddq $1, %rax
0x3a5:                      | R6_:
0x3a5: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x3af: 76b903000000000000   | 	jg R7
0x3b8: 90                   | 	ret
                            | 
0x3b9:                      | R7:
0x3b9: 50870000000000000000 | 	mrmovq (%rdi), %r8 #fetch val1
0x3c3: c0f70800000000000000 | 	iaddq $8, %rdi # src++
0x3cd: 40860000000000000000 | 	rmmovq %r8, (%rsi) # store val1
0x3d7: c0f70800000000000000 | 	iaddq $8, %rdi # dest++
0x3e1: 6288                 | 	andq %r8, %r8
0x3e3: 71f603000000000000   | 	jle R7_
0x3ec: c0f00100000000000000 | 	iaddq $1, %rax
0x3f6:                      | R7_:
0x3f6: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x400:                      | Done:
0x400: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x401:                      | End:
                            | #/* $end ncopy-ys */
0x401:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x401:                      | check:
                            | 	# Return value test
0x401: 30fa0000000000000000 | 	irmovq $0,%r10
0x40b: 61a0                 | 	subq %r10,%rax
0x40d: 732904000000000000   | 	je checkb
0x416: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x420: 706705000000000000   | 	jmp cdone
0x429:                      | checkb:
                            | 	# Code length check
0x429: 30f00104000000000000 | 	irmovq EndFun,%rax
0x433: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x43d: 6120                 | 	subq %rdx,%rax
0x43f: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x449: 6102                 | 	subq %rax,%rdx
0x44b: 756704000000000000   | 	jge checkm
0x454: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x45e: 706705000000000000   | 	jmp cdone
0x467:                      | checkm:
0x467: 30f28805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x471: 30f36805000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x47b: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x485: 6277                 | 	andq %rdi,%rdi
0x487: 73e504000000000000   | 	je checkpre         # Skip check if count = 0
0x490:                      | mcloop:
0x490: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x49a: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x4a4: 6160                 | 	subq %rsi,%rax
0x4a6: 73c204000000000000   | 	je  mok
0x4af: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x4b9: 706705000000000000   | 	jmp cdone
0x4c2:                      | mok:
0x4c2: 30f00800000000000000 | 	irmovq $8,%rax
0x4cc: 6002                 | 	addq %rax,%rdx	  # dest ++
0x4ce: 6003                 | 	addq %rax,%rbx    # src++
0x4d0: 30f00100000000000000 | 	irmovq $1,%rax
0x4da: 6107                 | 	subq %rax,%rdi    # cnt--
0x4dc: 769004000000000000   | 	jg mcloop
0x4e5:                      | checkpre:
                            | 	# Check for corruption
0x4e5: 30f28005000000000000 | 	irmovq Predest,%rdx
0x4ef: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x4f9: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x503: 6120                 | 	subq %rdx,%rax
0x505: 732105000000000000   | 	je checkpost
0x50e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x518: 706705000000000000   | 	jmp cdone
0x521:                      | checkpost:
                            | 	# Check for corruption
0x521: 30f29805000000000000 | 	irmovq Postdest,%rdx
0x52b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x535: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x53f: 6120                 | 	subq %rdx,%rax
0x541: 735d05000000000000   | 	je checkok
0x54a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x554: 706705000000000000   | 	jmp cdone
0x55d:                      | checkok:
                            | 	# Successful checks
0x55d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x567:                      | cdone:
0x567: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x568:                      | 	.align 8
0x568:                      | src:
0x568: ffffffffffffffff     | 	.quad -1
0x570: feffffffffffffff     | 	.quad -2
0x578: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x580:                      | 	.align 16
0x580:                      | Predest:
0x580: fadebc0000000000     | 	.quad 0xbcdefa
0x588:                      | dest:
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598:                      | Postdest:
0x598: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5a0:                      | .align 8
                            | # Run time stack
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
                            | 
0x620:                      | Stack:
